Notes: The code below can be run in oracle live

-----------------------------------------------------------Records-------------------------------------------------------------------------
                                                        
                                               Two ways to declare variables:
    emps hr.employees%rowtype;
    type r_emps is record (
        first_name varchar2(55),
        last_name varchar2(55)
        );
    emps_2 r_emps;

                                               To insert values into the record:
                                               
select * into emps from hr.employees where employee_id = 101;
select first_name, last_name into emps_2 from hr.employees where employee_id = 102;

                                               To update the values in the record:
emps.first_name := ‘stan’;

*if you have a record inside a record, it will need its own select clause if you want to insert values into it.
*Records don’t have any attributes like collections do.

-----------------------------------------------------------VARRAY--------------------------------------------------------------------------

                                                    Declaring and Initializing:
                                                    
type r_emps is varray(5) of varchar2(55);
emps r_emps := r_emps('stan', 'kyle', 'kenny');
emps r_emps := r_emps();

                                                       Printing the varray:
                                                    
    for i in 1..3 loop
        dbms_output.put_line(emps(i));
    end loop;
    
                                                      Post insert example:
                                                      
declare
    type r_emps is varray(15) of varchar2(55);
    emps r_emps := r_emps();
    idx pls_integer := 1;
begin
    --Populates the varray
    for i in 100..110 loop
        emps.extend;
        select first_name into emps(idx) from hr.employees where employee_id = i;
        idx := idx + 1;
    end loop;
    
    --prints the contents of the varray.
    for i in emps.first..emps.count loop
        dbms_output.put_line(emps(i));
    end loop;
end;

                                                       Schema level Varray
                                                       
create type r_emps is varray(15) of varchar2(55)

declare
    emps r_emps := r_emps();
    idx pls_integer := 1;
begin
    --populate
    for i in 100..110 loop
        emps.extend;
        select first_name into emps(idx) from hr.employees where employee_id = i;
        idx := idx + 1;
    end loop;
    
    --print
    for i in emps.first..emps.last loop
        dbms_output.put_line(emps(i));
    end loop;
end; 

                                                          Attributes:
                                                          
.count
(prints the amount of elements stored in the array)
.first
(prints the first element in the varray)
.last
(prints the last element in the varray)
.limit
(prints maximum capacity of the varray)
.exists()
(returns true if an element exists in the current index)

------------------------------------------------------------NESTED TABLE----------------------------------------------------------------

                                                Declaring and Initializing a nested table:
                                                
declare 
    type t_emps is table of varchar2(55);
    emps t_emps;
    
    type t_emps_2 is table of varchar2(55);
    emps_2 t_emps_2 := t_emps_2('stan', 'tom', 'joe');
    
    type t_emps_3 is table of varchar2(55);
    emps_3 t_emps_3 := t_emps_3(); 

                                                            Printing values:

--for loop
begin
    for i in 1..emps_2.count loop
        dbms_output.put_line(emps_2(i));
    end loop;
end;

--while loop
begin
    while emps_2.exists(idx) loop
        dbms_output.put_line(emps_2(idx));
        idx := idx + 1;
    end loop;
end;

--loop
begin
    loop    
        exit when idx > emps_2.count;
        dbms_output.put_line(emps_2(idx));
        idx := idx + 1;
    end loop;
end;


                                            Adding/Removing values after initialization

begin
    emps_3.extend;
    emps_3(1) := 'bart';
    emps_3.delete(1);
    if emps_3.exists(1) then
        dbms_output.put_line(emps_3(1));
    end if;
end;

                                                  Adding values in from a table
                                                  
begin
    --populates
    for i in 100..110 loop
        emps_3.extend;
        select first_name into emps_3(idx) from hr.employees where employee_id = i;
        idx := idx + 1;
    end loop;
    
    --prints
    for i in 1..emps_3.count loop
        dbms_output.put_line(emps_3(i));
    end loop;
end;                                                  

----------------------------------------------------------Associative Arrays------------------------------------------------------------

                                              Declaring and Initialzing Associative Arrays

declare 
    type t_emps is table of varchar2(55) index by pls_integer;
    emps t_emps;

    
                                                 Adding/Removing values after declaring:  
                                                 
declare 
    type t_emps is table of varchar2(55) index by pls_integer;
    emps t_emps;
begin
    --populates
    for i in 100..110 loop
        select first_name into emps(i) from hr.employees where employee_id = i;
    end loop;
    emps(111) := 'me';
    emps.delete(110);    
end;                                                 


                                    Iterating through a non-sequential Associative Array with while loops 
                                    
declare 
    type t_emps is table of varchar2(55) index by pls_integer;
    emps t_emps;
    idx pls_integer;
begin
    emps(100) := 'billy';
    emps(225) := 'joe';
    
    idx := emps.first;
    while idx is not null loop
      dbms_output.put_line(emps(idx));
      idx := emps.next(idx);
    end loop;
end;


                                      Iterating through an Associative Array with strings for keys 
                                      
declare
    type t_emps is table of varchar2(55) index by varchar2(225);
    emps t_emps;
    idx varchar2(225);
    v_first_name varchar2(55);
    v_email hr.employees.email%type;
begin
  --Populate
  for i in 100..110 loop
    select first_name, email into v_first_name, v_email from hr.employees where employee_id = i;
    emps(v_email) := v_first_name;
  end loop;
  
  --Print
  idx := emps.first;
  while idx is not null loop
    dbms_output.put_line(emps(idx) || '\s email is ' || idx);
    idx := emps.next(idx);
  end loop;
end;

                                                             Printing in reverse:
                                                             
declare
    type t_emps is table of varchar2(55) index by varchar2(225);
    emps t_emps;
    idx varchar2(225);
    v_first_name varchar2(55);
    v_email hr.employees.email%type;
begin
  --Populate
  for i in 100..110 loop
    select first_name, email into v_first_name, v_email from hr.employees where employee_id = i;
    emps(v_email) := v_first_name;
  end loop;
  
  --print
  idx := emps.last;
  while idx is not null loop
    dbms_output.put_line(emps(idx) || '\s email is ' || idx);
    idx := emps.prior(idx);
  end loop;
end;                                                             

                                                Using Associative Arrays with Records
                                                
declare
    type t_emps is table of hr.employees%rowtype index by varchar2(225);
    emps t_emps;
    idx varchar2(225);
begin
  --Populate
  for i in 100..110 loop
    select * into emps(i) from hr.employees where employee_id = i;
  end loop;
  
  --print
  idx := emps.first;
  while idx is not null loop
    dbms_output.put_line('The email of ' || emps(idx).first_name || ' is ' || emps(idx).email);
    idx := emps.next(idx);
  end loop;
end;
