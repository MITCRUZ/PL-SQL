CREATE OR REPLACE package body IMSI_CUSTOM.invoice_pkg is    
    
    --Procedure to call to run package
    procedure scan_for_emails(P_ERR_BUF OUT VARCHAR2, P_MSG_BUFF OUT VARCHAR2) is 
    --Creates an associative array
    v_array log_array;
    idx pls_integer;
    --Creates a record of the same structure as the email_log table
    v_record email_log%rowtype;    
    begin
        --Used for debugging
        APPS.FND_FILE.PUT_LINE(APPS.FND_FILE.LOG,'Execution Started At: '|| TO_CHAR(SYSDATE,'DD-MON-YYYY HH:MI:SS AM'));
        --Calls a function which populates our associative array with all the data from the email_log table
        v_array := gather_data;
        --Initializes the index to the first element of our associative array
        idx := v_array.first;        
        while idx is not null loop                                  
            v_record := scan_data_and_send(v_array(idx));            
            idx := v_array.next(idx);                         
            update email_log set status = 'COMPLETE' where order_id = v_record.order_id;                     
        end loop;
        APPS.FND_FILE.PUT_LINE(APPS.FND_FILE.LOG,'Execution COMPLETED At: '|| TO_CHAR(SYSDATE,'DD-MON-YYYY HH:MI:SS AM'));
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);        
    end;
        
    --Copies over all the data from the email_log table to our staging table
    function gather_data return log_array is 
    --Creates an associative array
    v_array log_array;
    --Used for debugging
    V_TEST VARCHAR2(25);
    begin
        --Used for debugging
        APPS.FND_FILE.PUT_LINE(APPS.FND_FILE.LOG,'INSIDE GATHER DATA '|| TO_CHAR(SYSDATE,'DD-MON-YYYY HH:MI:SS AM'));
        --Grabs a record from the email_log table
        for curr_order in (select * from email_log) loop
            --Stores the current order in our associative array
            v_array(curr_order.order_id) := curr_order;
            V_TEST := CURR_ORDER.ORDER_ID;
        end loop;
        --Used for debugging
        APPS.FND_FILE.PUT_LINE(APPS.FND_FILE.LOG,'LEAVING GATHER DATA, curr_order='|| v_TEST);
        --Returns the associative array with all of the data from the email_log table
        return v_array;        
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);
        return v_array;        
    end;
    
    --Filters out the array to only send emails to customers who have not yet received their invoice
    function scan_data_and_send (v_record email_log%rowtype) return email_log%rowtype is
    --Creates a record 
    e_record email_log%rowtype;
    --Creates an associative array
    v_array log_array;
    idx pls_integer;
    begin        
        --Sends an email if the status of the record is PENDING 
        if v_record.status = 'PENDING' then
            APPS.FND_FILE.PUT_LINE(APPS.FND_FILE.LOG,'SENDING EMAIL '|| TO_CHAR(SYSDATE,'DD-MON-YYYY HH:MI:SS AM'));
            send_email(v_record);            
            ELSE
            APPS.FND_FILE.PUT_LINE(APPS.FND_FILE.LOG,'NOT SENDING EMAIL '|| TO_CHAR(SYSDATE,'DD-MON-YYYY HH:MI:SS AM'));            
        end if;
        return v_record;
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);    
        return e_record;    
    end;
        
    --Sends an excel file via email to the current customer
    procedure send_email (v_record email_log%rowtype) is 
    begin                                     
        EMAIL(v_record.first_name,v_record.email,'subject','Invoice');
        
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);            
    end;
    
    --Creates an return a file which conatins basic info about an order (CURRENTLY NOT USED).   
    function produce_invoice(v_record email_log%rowtype) return UTL_FILE.FILE_TYPE is
    f_handle UTL_FILE.FILE_TYPE;
    p_conf_num email_log.confirmation_number%type;
    begin
        select confirmation_number into p_conf_num from email_log where order_id = v_record.order_id;
        f_handle := UTL_FILE.FOPEN('INSERT DIR NAME', 'Customer Invoice', 'W');
        
        UTL_FILE.PUT_LINE(f_handle, 'Customer: ' || v_record.first_name || ' ' || v_record.last_name);
        UTL_FILE.PUT_LINE(f_handle, 'Deliver To: ' || v_record.address);
        UTL_FILE.PUT_lINE(f_handle, 'Contact Information: ' || v_record.phone_number);
        UTL_FILE.PUT_LINE(f_handle, 'Confirmation Number: ' || p_conf_num);
        
        UTL_FILE.FCLOSE(f_handle);
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);
        return f_handle;        
    end;
    
    --Sets all record status's to PENDING (USED FOR TESTING PURPOSES)
    procedure reset_record_status is
    begin
        --Grabs a record from the email_log table
        for curr_rec in (select * from email_log) loop
            --Updates the current records status to PENDING
            update email_log set status = 'PENDING' where order_id = curr_rec.order_id;
        end loop;
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);        
    end;
    
    --Sets all the records status's to COMPLETE (USED FOR TESTING PURPOSES)
    procedure complete_all_records is
    begin
        --Grabs a record from the email_log table
        for curr_rec in (select * from email_log) loop
            --Updates the records status to COMPLETE
            update email_log set status = 'COMPLETE' where order_id = curr_rec.order_id;
        end loop;
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);        
    end;    
        
    --INCOMPLETE (needs work)
    procedure complete_random_orders is 
    --Allows only half of the records to be set to complete   
    total_changes_allowed pls_integer;
    --Holds the number of records that have been set to complete
    curr_changes pls_integer := 0;
    --Holds the total number of records in the email_log table
    num_of_records pls_integer;   
    --Holds a randomly generated number  
    id_num pls_integer;
    --Grabs the status of the target record before the update    
    old_status varchar2(15);
    --Grabs the status of the target record after the update
    new_status varchar2(15);
    --control number
    v_attempts pls_integer := 0;
    begin                  
        select count(*) into num_of_records from email_log;  
        print('num_of_records = ' || num_of_records);    
        total_changes_allowed := num_of_records / 2; 
        print('total_changes_allowed = ' || total_changes_allowed);
        while curr_changes < total_changes_allowed loop  
            <<v_continue>>
            if (v_attempts > num_of_records) then 
                goto l_finish;
            end if;                    
            id_num := trunc(dbms_random.value(1, num_of_records + 1));  
            --Grabs a random record from the email_logs table
            for curr_cust in (select * from email_log where order_id = id_num) loop                                                                                                                          
                old_status := scan_data_for_pending(curr_cust);
                print('old status: ' || old_status);
                update email_log set status = 'COMPLETE' where order_id = id_num;
                new_status := scan_data_for_pending(curr_cust);
                print('new status: ' || new_status);
                --If a records status has been changed, then increment curr_changes by 1 and grab a new random record to change
                if (old_status = 'PENDING' and new_status = 'COMPLETE') then
                    curr_changes := curr_changes + 1;                    
                    goto v_continue;
                end if; 
                v_attempts := v_attempts + 1;
                --If the flow of execution gets to this point, then no new changes have been made so curr_changes is not incremented but we continue the process.            
                goto v_continue; 
            end loop;       
         end loop; 
         <<l_finish>>
         print('Number of changes: ' || curr_changes);    
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);                       
    end;   

    --Returns the status of the current record (USELESS)               
    function scan_data_for_pending (v_record email_log%rowtype) return varchar2 is    
    begin        
        if v_record.status = 'PENDING' then
            return 'PENDING';
        else
            return 'COMPLETE';
        end if;
    exception
    when others then
        print('There was an unexpected error.');        
        return (SQLCODE || ' => ' || SQLERRM);   
    end;
        
    --Generates a 10 digit confirmation number and return it as varchar2
    function generate_confirmation_number return varchar2 is
    v_conf_num varchar2(10);
    begin
        --Runs 10 times
        for i in 1 .. 10 loop
            --Appends a random number from 1 to 9 to our variable
            v_conf_num := v_conf_num || trunc(dbms_random.value(1, 9));            
        end loop;
        --Returns result 
        return v_conf_num;
    exception
    when others then
        print('There was an unexpected error.');
        return(SQLCODE || ' => ' || SQLERRM);        
    end;
     
    --Populates every record in the email_log table with a confirmation number.
    procedure populate_with_conf_num is
    begin
        --Grabs a record from the email_log table
        for curr_cust in (select * from email_log) loop
            --Sets a unique confirmation number to every customer in our email_log table.
            update email_log set confirmation_number = generate_confirmation_number where order_id = curr_cust.order_id;
        end loop;
    exception
    when others then
        print('There was an unexpected error.');
        print(SQLCODE || ' => ' || SQLERRM);        
    end;
    
    /*
        Given a sorted array of size 9, it can find the elements index in logrithmic time
    */
    function binary_search_my_pr(targetIn pls_integer) return pls_integer is
        type c_emps is varray(9) of pls_integer;
        --Initializes a sorted varray with 9 elements
        emp c_emps := c_emps(2, 34, 56, 78, 91, 97, 99, 104, 902);
        target pls_integer := targetIn;
        --Calculates the bounds from which it will begin its search
        v_left pls_integer := 1;
        v_right pls_integer := 9;
        v_mid pls_integer := (v_left + v_right) / 2;         
    begin        
        while (v_left <= v_right) loop
            --readjusts the value of mid for every iteration
            v_mid := (v_left + v_right) / 2;  
            --It the current cells value is greater than the target, then cut the search space in half by looking for the target in the cells to the left
            if (emp(v_mid) > target) then
                v_right := v_mid - 1;
            --It the current cells value is less than the target, then cut the search space in half by looking for the target in the cells to the right
            elsif (emp(v_mid) < target) then
                v_left := v_mid + 1;
            else
            --assumes value has been found and returns the current index
                return v_mid;
            end if;
        end loop;
        --Returns a negative one if the target value is not in the stored array
        return -1;
    end;
end;
/
