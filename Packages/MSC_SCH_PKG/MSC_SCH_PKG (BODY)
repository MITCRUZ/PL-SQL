/* Formatted on 3/3/2020 7:32:39 AM (QP5 v5.256.13226.35510) */
CREATE OR REPLACE PACKAGE BODY IMSI_CUSTOM.MSC_SCH_PKG
IS
   --*******************************************MAIN PROCEDURE TO RUN**************************************************--
   PROCEDURE send_to (P_ERR_BUF OUT VARCHAR2, P_MSG_BUFF OUT VARCHAR2)
   IS
   BEGIN
      --INSERT PROCEDURE THAT GENERATES UTL_FILE
      IMSI_CUSTOM.IMSI_EMAIL ('Administrator',
                              'Administrator@imsready.com',
                              'Mitchel Santillan Cruz',
                              'mitchel_cruz@steris.com',
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              'SUBJECT OF EMAIL',
                              'BODY OF EMAIL',
                              NULL,
                              'BFILE_DIR' || '/' || 'DAILY_TASKS.TXT', --fILENAMEB
                              'IMSI_CUSTOM.MSC_SCH_PKG.generate_file', --PROC. NAME
                              0,                               --NUM OF PARAMS
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              'N');
      --After the email is sent, the two tables should be cleared
      reset_tables;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   --**********************************************************************************************************************************--



   --*********************************************************USER METHODS*************************************************************--


   PROCEDURE insert_task (p_priority    msc_tbl.Priority%TYPE,
                          p_desc        msc_tbl.Description%TYPE,
                          p_time        msc_tbl.Approx_Time%TYPE)
   IS
      v_rank   msc_tbl.RANK%TYPE;
   BEGIN
      --The table takes in 6 arguments
      idx := idx + 1;

      IF (p_priority = 'High')
      THEN
         v_rank := 'A';
      ELSIF (p_priority = 'Medium')
      THEN
         v_rank := 'B';
      ELSIF (p_priority = 'Low')
      THEN
         v_rank := 'C';
      ELSE
         v_rank := 'D';
      END IF;

      INSERT INTO msc_tbl (Task,
                           Task_ID,
                           Priority,
                           Description,
                           Approx_Time,
                           RANK)
           VALUES (idx,
                   unique_id_generator,
                   p_priority,
                   p_desc,
                   p_time,
                   v_rank);
   --commit;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE delete_task (p_target NUMBER)
   IS
      v_param   NUMBER;
   BEGIN
      --Examine each cell one by one and compare it to a target value
      FOR curr_tsk IN (SELECT * FROM msc_tbl)
      LOOP
         --When found, delete that record
         IF (curr_tsk.Task = p_target)
         THEN
            --Grabs the Task number of the record that comes after the one you have deleted
            v_param := curr_tsk.Task + 1;

            DELETE FROM msc_tbl
                  WHERE Task = curr_tsk.Task;

            --commit;

            --Iterate through the remaining records in order to adjust the task numbers
            FOR i IN v_param .. find_last_task_num
            LOOP
               adjust_task_numbers (i);
            END LOOP;
         END IF;
      END LOOP;

      --Makes sure to adjust the indexes if the table has been completely wiped clean
      reset_table_state;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE search_for_task_send_to (p_task_num NUMBER, p_email VARCHAR2)
   IS
   BEGIN
      IMSI_CUSTOM.IMSI_EMAIL (
         'Administrator',
         'Administrator@imsready.com',
         'Mitchel Santillan Cruz',
         p_email,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         'SUBJECT OF EMAIL',
         'BODY OF EMAIL',
         NULL,
         'BFILE_DIR' || '/' || 'SPECIFIC_TASK.TXT',                --fILENAMEB
         'IMSI_CUSTOM.MSC_SCH_PKG.generate_specific_task',        --PROC. NAME
         0,                                                    --NUM OF PARAMS
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         NULL,
         'N');
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE completed_task (p_task_num NUMBER)
   IS
   BEGIN
      UPDATE msc_tbl
         SET Status = 'COMPLETE'
       WHERE Task = p_task_num;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   --**********************************************************************************************************************************--



   --**********************************************************FUNCTIONAL METHODS******************************************************--

   PROCEDURE generate_file
   IS
      f_handle        UTL_FILE.FILE_TYPE;
      tasks_pending   NUMBER := total_tasks - tasks_completed;
   BEGIN
      --Creates a second table which is ordered based on Priority set by user
      order_table_on_priority;
      f_handle := UTL_FILE.FOPEN ('BFILE_DIR', 'DAILY_TASKS.TXT', 'W');

      UTL_FILE.PUT_LINE (
         f_handle,
         '============================================================================================');
      UTL_FILE.PUT_LINE (f_handle,
                         'Date: ' || TO_CHAR (SYSDATE, 'MON DD, YYYY'));
      UTL_FILE.PUT_LINE (f_handle, 'Tasks to finish today: ' || total_tasks);
      UTL_FILE.PUT_LINE (f_handle, 'Tasks Completed: ' || tasks_completed);
      UTL_FILE.PUT_LINE (f_handle, 'Tasks Pending: ' || tasks_pending);
      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');

      --TEXT IMAGE--
      UTL_FILE.PUT_LINE (f_handle, '_______________**');
      UTL_FILE.PUT_LINE (f_handle, '______________****');
      UTL_FILE.PUT_LINE (f_handle, '_____________**_****');
      UTL_FILE.PUT_LINE (f_handle, '____________**____***');
      UTL_FILE.PUT_LINE (f_handle, '___________***______**');
      UTL_FILE.PUT_LINE (f_handle, '___________***_______**');
      UTL_FILE.PUT_LINE (f_handle, '__________****________**');
      UTL_FILE.PUT_LINE (f_handle, '__________*_**_________**');
      UTL_FILE.PUT_LINE (f_handle, '__________*__**_________**____**');
      UTL_FILE.PUT_LINE (f_handle, '__________*__**__________*******');
      UTL_FILE.PUT_LINE (f_handle, '_________**__***______******___*');
      UTL_FILE.PUT_LINE (f_handle, '_________**___**__******__**');
      UTL_FILE.PUT_LINE (f_handle, '_______**_*____****________**');
      UTL_FILE.PUT_LINE (f_handle, '______**__**___**__________**');
      UTL_FILE.PUT_LINE (f_handle, '_____**____**___**__________**');
      UTL_FILE.PUT_LINE (f_handle, '___**_______**___**_________**');
      UTL_FILE.PUT_LINE (f_handle, '___*************__**_________*');
      UTL_FILE.PUT_LINE (f_handle, '_*****************_**________**');
      UTL_FILE.PUT_LINE (f_handle, '**__******____*********______**');
      UTL_FILE.PUT_LINE (f_handle, '*****___*______*___*****_____**');
      UTL_FILE.PUT_LINE (f_handle, '________********______*****_**');
      UTL_FILE.PUT_LINE (f_handle, '______***********________****');
      UTL_FILE.PUT_LINE (f_handle, '______************');
      UTL_FILE.PUT_LINE (f_handle, '______*__**_******');
      UTL_FILE.PUT_LINE (f_handle, '_____**______*___*');
      UTL_FILE.PUT_LINE (f_handle, '_____**_____**___*');
      UTL_FILE.PUT_LINE (f_handle, '_____*______**___*');
      UTL_FILE.PUT_LINE (f_handle, '____**______**___**');
      UTL_FILE.PUT_LINE (f_handle, '____**______**___**');
      UTL_FILE.PUT_LINE (f_handle, '___****************');
      UTL_FILE.PUT_LINE (f_handle, '__*********_********');
      UTL_FILE.PUT_LINE (f_handle, '__**________***____**');
      UTL_FILE.PUT_LINE (f_handle, '____****************');

      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');
      UTL_FILE.PUT_LINE (
         f_handle,
         '============================================================================================');
      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');


      UTL_FILE.PUT_LINE (f_handle, 'Remaining Tasks ordered by Priority...');
      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');

      --Prints the task Priority followed by the task description
      IF (tasks_pending = 0)
      THEN
         UTL_FILE.PUT_LINE (
            f_handle,
            '        There are no tasks that need to be completed today!');
         UTL_FILE.PUT_LINE (
            f_handle,
            '                                                                                            ');
      ELSE
         --Uses cursor to loop through the MSC_TBL_ORDERED and grabs the necessary information
         FOR curr_tsk2 IN (SELECT * FROM msc_tbl_ordered)
         LOOP
            --Prints the details of the remaining tasks that have NOT been completed
            IF (status_is_pending (curr_tsk2))
            THEN
               --Adds more spaces for visual purposes
               IF (curr_tsk2.Priority = 'Low')
               THEN
                  UTL_FILE.PUT_LINE (
                     f_handle,
                     curr_tsk2.Priority || ':    ' || curr_tsk2.Description);
               ELSIF (curr_tsk2.Priority = 'High')
               THEN
                  UTL_FILE.PUT_LINE (
                     f_handle,
                     curr_tsk2.Priority || ':   ' || curr_tsk2.Description);
               ELSIF (curr_tsk2.Priority = 'Medium')
               THEN
                  UTL_FILE.PUT_LINE (
                     f_handle,
                     curr_tsk2.Priority || ': ' || curr_tsk2.Description);
               END IF;
            END IF;
         END LOOP;
      END IF;

      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');
      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');
      UTL_FILE.PUT_LINE (f_handle, 'Tasks Completed...');
      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');

      --Prints the task number followed by the task description
      IF (tasks_completed = 0)
      THEN
         UTL_FILE.PUT_LINE (f_handle,
                            '        No tasks have been completed today.');
      ELSE
         --Uses cursor to loop through the MSC_TBL and grabs the necessary information
         FOR curr_tsk IN (SELECT * FROM msc_tbl)
         LOOP
            --Prints the details of the remaining tasks that have NOT been completed
            IF (NOT status_is_pending (curr_tsk))
            THEN
               --Used only for visual purposes
               IF (curr_tsk.Task < 10)
               THEN
                  UTL_FILE.PUT_LINE (
                     f_handle,
                     curr_tsk.Task || ': ' || curr_tsk.Description);
               ELSIF (curr_tsk.Task >= 10)
               THEN
                  UTL_FILE.PUT_LINE (
                     f_handle,
                     curr_tsk.Task || ':  ' || curr_tsk.Description);
               END IF;
            END IF;
         END LOOP;
      END IF;

      UTL_FILE.FCLOSE (f_handle);
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   FUNCTION status_is_pending (p_task msc_tbl%ROWTYPE)
      RETURN BOOLEAN
   IS
   BEGIN
      IF (p_task.Status = 'PENDING')
      THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   FUNCTION total_tasks
      RETURN INT
   IS
      result   INT := 0;
   BEGIN
      SELECT COUNT (*) INTO RESULT FROM msc_tbl;

      RETURN result;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   FUNCTION tasks_completed
      RETURN INT
   IS
      result   INT := 0;
   BEGIN
      SELECT COUNT (*)
        INTO result
        FROM msc_tbl
       WHERE status = 'COMPLETE';

      RETURN RESULT;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   FUNCTION unique_id_generator
      RETURN VARCHAR2
   IS
      v_id   msc_tbl.Task_ID%TYPE;
   BEGIN
      FOR i IN 1 .. 5
      LOOP
         v_id := v_id || TRUNC (DBMS_RANDOM.VALUE (0, 9));
      END LOOP;

      RETURN v_id;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE PRINT (text VARCHAR2)
   IS
   BEGIN
      DBMS_OUTPUT.put_line (text);
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE adjust_task_numbers (p_tsk_num NUMBER)
   IS
   BEGIN
      FOR cur_rec IN (SELECT * FROM msc_tbl)
      LOOP
         --Decreases the idx value by one since a record has been deleted and its values need to be updated
         --Keep in mind that idx should always be one less than p_tsk_num
         idx := p_tsk_num - 1;

         UPDATE msc_tbl
            SET Task = idx
          WHERE Task = p_tsk_num;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   FUNCTION find_last_task_num
      RETURN NUMBER
   IS
      max_idx   NUMBER := 0;
   BEGIN
      FOR i IN (SELECT * FROM msc_tbl)
      LOOP
         IF (i.Task > max_idx)
         THEN
            max_idx := i.Task;
         END IF;
      END LOOP;

      RETURN max_idx;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE generate_specific_task
   IS
      f_handle   UTL_FILE.FILE_TYPE;
      v_record   msc_tbl%ROWTYPE;
   BEGIN
      v_record := find_record (2);
      f_handle := UTL_FILE.FOPEN ('BFILE_DIR', 'SPECIFIC_TASK.TXT', 'W');

      UTL_FILE.PUT_LINE (f_handle, 'Task #: ' || v_record.Task);
      UTL_FILE.PUT_LINE (f_handle, 'Task ID #: ' || v_record.Task_ID);
      UTL_FILE.PUT_LINE (f_handle, 'Priority: ' || v_record.Priority);
      UTL_FILE.PUT_LINE (f_handle, 'Description: ' || v_record.Description);
      UTL_FILE.PUT_LINE (f_handle, 'Approx Time: ' || v_record.Approx_Time);
      UTL_FILE.PUT_LINE (f_handle, 'Status: ' || v_record.Status);
      UTL_FILE.PUT_LINE (
         f_handle,
         '                                                                                            ');

      --TEXT IMAGE--
      UTL_FILE.PUT_LINE (f_handle, '_______________**');
      UTL_FILE.PUT_LINE (f_handle, '______________****');
      UTL_FILE.PUT_LINE (f_handle, '_____________**_****');
      UTL_FILE.PUT_LINE (f_handle, '____________**____***');
      UTL_FILE.PUT_LINE (f_handle, '___________***______**');
      UTL_FILE.PUT_LINE (f_handle, '___________***_______**');
      UTL_FILE.PUT_LINE (f_handle, '__________****________**');
      UTL_FILE.PUT_LINE (f_handle, '__________*_**_________**');
      UTL_FILE.PUT_LINE (f_handle, '__________*__**_________**____**');
      UTL_FILE.PUT_LINE (f_handle, '__________*__**__________*******');
      UTL_FILE.PUT_LINE (f_handle, '_________**__***______******___*');
      UTL_FILE.PUT_LINE (f_handle, '_________**___**__******__**');
      UTL_FILE.PUT_LINE (f_handle, '_______**_*____****________**');
      UTL_FILE.PUT_LINE (f_handle, '______**__**___**__________**');
      UTL_FILE.PUT_LINE (f_handle, '_____**____**___**__________**');
      UTL_FILE.PUT_LINE (f_handle, '___**_______**___**_________**');
      UTL_FILE.PUT_LINE (f_handle, '___*************__**_________*');
      UTL_FILE.PUT_LINE (f_handle, '_*****************_**________**');
      UTL_FILE.PUT_LINE (f_handle, '**__******____*********______**');
      UTL_FILE.PUT_LINE (f_handle, '*****___*______*___*****_____**');
      UTL_FILE.PUT_LINE (f_handle, '________********______*****_**');
      UTL_FILE.PUT_LINE (f_handle, '______***********________****');
      UTL_FILE.PUT_LINE (f_handle, '______************');
      UTL_FILE.PUT_LINE (f_handle, '______*__**_******');
      UTL_FILE.PUT_LINE (f_handle, '_____**______*___*');
      UTL_FILE.PUT_LINE (f_handle, '_____**_____**___*');
      UTL_FILE.PUT_LINE (f_handle, '_____*______**___*');
      UTL_FILE.PUT_LINE (f_handle, '____**______**___**');
      UTL_FILE.PUT_LINE (f_handle, '____**______**___**');
      UTL_FILE.PUT_LINE (f_handle, '___****************');
      UTL_FILE.PUT_LINE (f_handle, '__*********_********');
      UTL_FILE.PUT_LINE (f_handle, '__**________***____**');
      UTL_FILE.PUT_LINE (f_handle, '____****************');

      UTL_FILE.FCLOSE (f_handle);
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   FUNCTION find_record (p_task_num NUMBER)
      RETURN msc_tbl%ROWTYPE
   IS
      v_record   msc_tbl%ROWTYPE;
   BEGIN
      SELECT *
        INTO v_record
        FROM msc_tbl
       WHERE Task = p_task_num;

      RETURN v_record;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE reset_table_state
   IS
   BEGIN
      IF (total_tasks = 0)
      THEN
         idx := 0;
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   --**********************************************************************************************************************************--



   --********************************************************TEST METHODS**************************************************************--

   PROCEDURE order_table_on_priority
   IS
   --r_record msc_tbl%rowtype;
   BEGIN
      DELETE FROM msc_tbl_ordered;

      --select * into r_record from msc_tbl order by Priority;
      FOR i IN (  SELECT *
                    FROM msc_tbl
                ORDER BY RANK)
      LOOP
         INSERT INTO msc_tbl_ordered
              VALUES (i.Task,
                      i.Task_ID,
                      i.Priority,
                      i.Description,
                      i.Approx_Time,
                      i.Status,
                      i.RANK);
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE delete_task2 (p_target NUMBER)
   IS
      v_param   NUMBER;
   BEGIN
      --Examine each cell one by one and compare it to a target value
      FOR curr_tsk IN (SELECT * FROM msc_tbl)
      LOOP
         --When found, delete that record
         IF (curr_tsk.Task = p_target)
         THEN
            DELETE FROM msc_tbl_ordered
                  WHERE Task = curr_tsk.Task;
         --commit;
         END IF;
      END LOOP;

      --Makes sure to adjust the indexes if the table has been completely wiped clean
      reset_table_state;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE reset_tables
   IS
      v_time   DATE := SYSDATE;
      v_char   VARCHAR2 (15) := TO_CHAR (v_time, 'HH:MI');
   BEGIN
      clear_todo_list;
      clear_todo_list2;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE clear_todo_list
   IS
   BEGIN
      --Resets the idx value
      idx := 0;

      DELETE FROM msc_tbl;

      --commit;
      --Makes sure to adjust the indexes if the table has been completely wiped clean
      reset_table_state;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE clear_todo_list2
   IS
   BEGIN
      DELETE FROM msc_tbl_ordered;
   --commit;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE set_all_to_pending
   IS
   BEGIN
      FOR curr_rec IN (SELECT * FROM msc_tbl)
      LOOP
         UPDATE msc_tbl
            SET Status = 'PENDING'
          WHERE Task = curr_rec.Task;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;

   PROCEDURE set_all_to_complete
   IS
   BEGIN
      FOR curr_rec IN (SELECT * FROM msc_tbl)
      LOOP
         UPDATE msc_tbl
            SET Status = 'COMPLETE'
          WHERE Task = curr_rec.Task;
      END LOOP;
   EXCEPTION
      WHEN OTHERS
      THEN
         PRINT (SQLCODE || ' => ' || SQLERRM);
   END;
--**********************************************************************************************************************************--

END;
/
